conditionalPanel(
condition = "input.graphType === 'scatter'",
selectInput("yVarScatter", "Select Y Variable:",
choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar'",
selectInput("xVarBar", "Select X Variable:", choices = names(data)),
selectInput("fillVarBar", "Select Fill Variable:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'density'",
selectInput("fillVarDensity", "Select Fill Variable for Density Plot:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar' || input.graphType === 'density'",
checkboxInput("showLegend", "Show Legend", TRUE)
)
)),
column(9, div(class = "panel",
div(class = "plotly-container",
plotlyOutput("plot")
),
h5("Visualization Output", class = "centered-header")
))
)
)
),
# Footer
fluidRow(
column(12, div(class = "footer",
h5("Developed by Bibek Sapkota (Student_ID: 23189618)")
))
),
# Show Instructions Button
actionButton("show_instructions", "Show Instructions", class = "show-instructions"),
# Instructions List
tags$ul(id = "instruction_list", class = "instruction-list",
tags$li("Dataset Tab: View the complete thyroid function dataset. You can scroll horizontally to see all columns."),
tags$li("Summary Tab: Get a summary of key statistics for each column in the dataset."),
tags$li("Visualization Tab: Select different types of visualizations, adjust parameters, and see interactive plots."),
tags$li("Use the sliders and dropdown menus to filter data and customize the plots.")
)
)
# Add necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(RColorBrewer)
library(shinyjs)
library(DT)
library(fontawesome)
library(bslib)         # For theme switching
library(shinyWidgets)  # For the toggle switch
# Define light and dark themes using bslib
light_theme <- bs_theme(
version = 5,
bootswatch = "lux",  # Light theme
bg = "#f4f6f7",      # Light background color
fg = "#2c3e50",      # Dark text color
primary = "#3498db",
base_font = font_google("Roboto")
)
dark_theme <- bs_theme(
version = 5,
bootswatch = "darkly",  # Dark theme
bg = "#2c3e50",         # Dark background color
fg = "#f8f9fa",         # Light text color
primary = "#6dd5fa",
base_font = font_google("Roboto")
)
# UI Definition
ui <- fluidPage(
theme = light_theme,  # Set the initial theme to light mode
useShinyjs(),         # Allows toggling elements dynamically
# CSS for customization
tags$head(
tags$style(HTML("
body {
margin-bottom: 50px;
}
.header {
background: linear-gradient(90deg, #2980b9, #6dd5fa, #ffffff);
color: white;
padding: 20px;
text-align: center;
border-radius: 8px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.header h2 {
margin: 0;
font-weight: 700;
font-size: 28px;
letter-spacing: 1px;
}
.footer {
background-color: #2C3E50;
color: white;
text-align: center;
position: fixed;
bottom: 0;
width: 100%;
height: 35px;
line-height: 35px;
font-size: 13px;
box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
}
.panel {
background-color: white;
border: 1px solid #ddd;
border-radius: 8px;
padding: 20px;
box-shadow: 0 4px 8px rgba(0,0,0,0.05);
margin-bottom: 20px;
margin-top: 10px;
}
.show-instructions {
cursor: pointer;
position: fixed;
top: 23px;
right: 80px;
z-index: 1000;
border-radius: 20px;
box-shadow: 0 3px 6px rgba(0,0,0,0.1);
}
.theme-toggle {
position: fixed;
top: 23px;
right: 20px;
z-index: 1000;
background-color: #3498db;
border-radius: 20px;
box-shadow: 0 3px 6px rgba(0,0,0,0.1);
}
"))
),
# Header with title and theme toggle
div(class = "header",
h2("Visualization of Thyroid Function Data"),
prettySwitch("dark_mode", "Dark Mode", status = "primary", fill = TRUE, inline = TRUE, class = "theme-toggle")
),
# Main Content
tabsetPanel(
tabPanel(
title = tagList(icon("table", class = "fa-lg"), " Dataset"),
fluidRow(
column(12, div(class = "panel",
h3(icon("database"), " Dataset"),
p("Explore the thyroid function dataset:"),
div(class = "dataTable-container",
DT::DTOutput("dataTable")
)
))
)
),
tabPanel(
title = tagList(icon("chart-bar", class = "fa-lg"), " Summary"),
fluidRow(
column(12, div(class = "panel",
h3(icon("clipboard-list"), " Dataset Summary"),
p("Summary of key statistics:"),
verbatimTextOutput("columnSummary")
))
)
),
tabPanel(
title = tagList(icon("chart-line", class = "fa-lg"), " Visualization"),
fluidRow(
column(3, div(class = "visual",
h4(icon("sliders-h"), " Visualization Controls"),
selectInput("graphType", "Select Graph Type:",
choices = c("Histogram" = "histogram",
"Bar Plot" = "bar",
"Density Plot" = "density",
"Scatter Plot" = "scatter")),
conditionalPanel(
condition = "input.graphType !== 'bar'",
sliderInput("ageRange", "Select Age Range:",
min = 20, max = 80, value = c(20, 80))
),
conditionalPanel(
condition = "input.graphType === 'histogram'",
sliderInput("bins", "Number of Bins:",
min = 5, max = 50, value = 30)
),
conditionalPanel(
condition = "input.graphType === 'scatter'",
selectInput("yVarScatter", "Select Y Variable:",
choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar'",
selectInput("xVarBar", "Select X Variable:", choices = names(data)),
selectInput("fillVarBar", "Select Fill Variable:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'density'",
selectInput("fillVarDensity", "Select Fill Variable for Density Plot:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar' || input.graphType === 'density'",
checkboxInput("showLegend", "Show Legend", TRUE)
)
)),
column(9, div(class = "panel",
div(class = "plotly-container",
plotlyOutput("plot")
),
h5("Visualization Output", class = "centered-header")
))
)
)
),
# Footer
fluidRow(
column(12, div(class = "footer",
h5("Developed by Bibek Sapkota (Student_ID: 23189618)")
))
),
# Show Instructions Button
actionButton("show_instructions", "Show Instructions", class = "show-instructions"),
# Instructions List
tags$ul(id = "instruction_list", class = "instruction-list",
tags$li("Dataset Tab: View the complete thyroid function dataset. You can scroll horizontally to see all columns."),
tags$li("Summary Tab: Get a summary of key statistics for each column in the dataset."),
tags$li("Visualization Tab: Select different types of visualizations, adjust parameters, and see interactive plots."),
tags$li("Use the sliders and dropdown menus to filter data and customize the plots.")
)
)
# Add necessary libraries
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
library(RColorBrewer)
library(shinyjs)
library(DT)
library(fontawesome)
library(bslib)         # For theme switching
library(shinyWidgets)  # For the toggle switch
# Define light and dark themes using bslib
light_theme <- bs_theme(
version = 5,
bootswatch = "lux",  # Light theme
bg = "#f4f6f7",      # Light background color
fg = "#2c3e50",      # Dark text color
primary = "#3498db",
base_font = font_google("Roboto")
)
dark_theme <- bs_theme(
version = 5,
bootswatch = "darkly",  # Dark theme
bg = "#2c3e50",         # Dark background color
fg = "#f8f9fa",         # Light text color
primary = "#6dd5fa",
base_font = font_google("Roboto")
)
# UI Definition
ui <- fluidPage(
theme = light_theme,  # Set the initial theme to light mode
useShinyjs(),         # Allows toggling elements dynamically
# CSS for customization
tags$head(
tags$style(HTML("
body {
margin-bottom: 50px;
}
.header {
background: linear-gradient(90deg, #2980b9, #6dd5fa, #ffffff);
color: white;
padding: 20px;
text-align: center;
border-radius: 8px;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}
.header h2 {
margin: 0;
font-weight: 700;
font-size: 28px;
letter-spacing: 1px;
}
.footer {
background-color: #2C3E50;
color: white;
text-align: center;
position: fixed;
bottom: 0;
width: 100%;
height: 35px;
line-height: 35px;
font-size: 13px;
box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
}
.panel {
background-color: white;
border: 1px solid #ddd;
border-radius: 8px;
padding: 20px;
box-shadow: 0 4px 8px rgba(0,0,0,0.05);
margin-bottom: 20px;
margin-top: 10px;
}
.show-instructions {
cursor: pointer;
position: fixed;
top: 23px;
right: 80px;
z-index: 1000;
border-radius: 20px;
box-shadow: 0 3px 6px rgba(0,0,0,0.1);
}
.theme-toggle-container {
position: fixed;
top: 23px;
right: 20px;
z-index: 1000;
padding: 5px;
}
"))
),
# Header with title and theme toggle
div(class = "header",
h2("Visualization of Thyroid Function Data"),
div(class = "theme-toggle-container",
prettySwitch("dark_mode", "Dark Mode", status = "primary", fill = TRUE, inline = TRUE)
)
),
# Main Content
tabsetPanel(
tabPanel(
title = tagList(icon("table", class = "fa-lg"), " Dataset"),
fluidRow(
column(12, div(class = "panel",
h3(icon("database"), " Dataset"),
p("Explore the thyroid function dataset:"),
div(class = "dataTable-container",
DT::DTOutput("dataTable")
)
))
)
),
tabPanel(
title = tagList(icon("chart-bar", class = "fa-lg"), " Summary"),
fluidRow(
column(12, div(class = "panel",
h3(icon("clipboard-list"), " Dataset Summary"),
p("Summary of key statistics:"),
verbatimTextOutput("columnSummary")
))
)
),
tabPanel(
title = tagList(icon("chart-line", class = "fa-lg"), " Visualization"),
fluidRow(
column(3, div(class = "visual",
h4(icon("sliders-h"), " Visualization Controls"),
selectInput("graphType", "Select Graph Type:",
choices = c("Histogram" = "histogram",
"Bar Plot" = "bar",
"Density Plot" = "density",
"Scatter Plot" = "scatter")),
conditionalPanel(
condition = "input.graphType !== 'bar'",
sliderInput("ageRange", "Select Age Range:",
min = 20, max = 80, value = c(20, 80))
),
conditionalPanel(
condition = "input.graphType === 'histogram'",
sliderInput("bins", "Number of Bins:",
min = 5, max = 50, value = 30)
),
conditionalPanel(
condition = "input.graphType === 'scatter'",
selectInput("yVarScatter", "Select Y Variable:",
choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar'",
selectInput("xVarBar", "Select X Variable:", choices = names(data)),
selectInput("fillVarBar", "Select Fill Variable:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'density'",
selectInput("fillVarDensity", "Select Fill Variable for Density Plot:", choices = names(data))
),
conditionalPanel(
condition = "input.graphType === 'bar' || input.graphType === 'density'",
checkboxInput("showLegend", "Show Legend", TRUE)
)
)),
column(9, div(class = "panel",
div(class = "plotly-container",
plotlyOutput("plot")
),
h5("Visualization Output", class = "centered-header")
))
)
)
),
# Footer
fluidRow(
column(12, div(class = "footer",
h5("Developed by Bibek Sapkota (Student_ID: 23189618)")
))
),
# Show Instructions Button
actionButton("show_instructions", "Show Instructions", class = "show-instructions"),
# Instructions List
tags$ul(id = "instruction_list", class = "instruction-list",
tags$li("Dataset Tab: View the complete thyroid function dataset. You can scroll horizontally to see all columns."),
tags$li("Summary Tab: Get a summary of key statistics for each column in the dataset."),
tags$li("Visualization Tab: Select different types of visualizations, adjust parameters, and see interactive plots."),
tags$li("Use the sliders and dropdown menus to filter data and customize the plots.")
)
)
# Server Function
server <- function(input, output, session) {
data <- read.csv('Thyroid_Diff.csv')
# Theme switching based on the toggle switch
observeEvent(input$dark_mode, {
if (input$dark_mode) {
session$setCurrentTheme(dark_theme)
} else {
session$setCurrentTheme(light_theme)
}
})
output$dataTable <- DT::renderDT({
data
}, options = list(pageLength = 25))
output$columnSummary <- renderPrint({
summary_list <- lapply(names(data), function(column) {
if (is.numeric(data[[column]])) {
mean_val <- mean(data[[column]], na.rm = TRUE)
median_val <- median(data[[column]], na.rm = TRUE)
std_dev <- sd(data[[column]], na.rm = TRUE)
min_val <- min(data[[column]], na.rm = TRUE)
max_val <- max(data[[column]], na.rm = TRUE)
paste(
column, " (Numeric)",
"\n Mean:", round(mean_val, 2),
"\n Median:", round(median_val, 2),
"\n Standard Deviation:", round(std_dev, 2),
"\n Min:", min_val,
"\n Max:", max_val,
"\n"
)
} else if (is.factor(data[[column]]) || is.character(data[[column]])) {
mode_val <- names(sort(table(data[[column]]), decreasing = TRUE)[1])
mode_count <- max(table(data[[column]]))
unique_vals <- unique(data[[column]])
paste(
column, " (Categorical)",
"\n Mode:", mode_val,
"\n Mode Count:", mode_count,
"\n Unique Values:", paste(unique_vals, collapse = ", "),
"\n"
)
}
})
cat(unlist(summary_list), sep = "\n")
})
observe({
updateSelectInput(session, "yVarScatter", choices = names(data), selected = "Age")
updateSelectInput(session, "xVarBar", choices = names(data), selected = "Gender")
updateSelectInput(session, "fillVarBar", choices = names(data), selected = "Smoking")
updateSelectInput(session, "fillVarDensity", choices = names(data), selected = "Smoking")
})
output$plot <- renderPlotly({
req(input$graphType)
plot_input <- switch(input$graphType,
histogram = ggplot(filtered_data(), aes(x = Age)) +
geom_histogram(bins = input$bins, fill = "orange", color = "black") +
labs(title = "Histogram of Age", x = "Age", y = "Frequency") +
theme_minimal() +
theme(legend.position = ifelse(input$showLegend, "right", "none")),
bar = ggplot(data, aes_string(x = input$xVarBar, fill = input$fillVarBar)) +
geom_bar(position = "dodge", show.legend = input$showLegend) +
labs(title = paste("Bar Plot of", input$xVarBar, "and", input$fillVarBar), x = input$xVarBar, y = "Count") +
theme_minimal() +
theme(legend.position = ifelse(input$showLegend, "right", "none")),
density = ggplot(filtered_data(), aes(x = Age, fill = .data[[input$fillVarDensity]])) +
geom_density(alpha = 0.5, show.legend = input$showLegend) +
labs(title = paste("Density Plot of Age by", input$fillVarDensity), x = "Age", y = "Density") +
theme_minimal() +
theme(legend.position = ifelse(input$showLegend, "right", "none")),
scatter = ggplot(filtered_data(), aes(x = Age, y = .data[[input$yVarScatter]], color = .data[[input$yVarScatter]])) +
geom_point() +
labs(title = paste("Scatter Plot of Age vs", input$yVarScatter), x = "Age", y = input$yVarScatter) +
theme_minimal() +
theme(legend.position = ifelse(input$showLegend, "right", "none"))
)
ggplotly(plot_input)
})
filtered_data <- reactive({
if (input$graphType %in% c("histogram", "density", "scatter")) {
data %>% filter(Age >= input$ageRange[1], Age <= input$ageRange[2])
} else {
data
}
})
# Toggle instructions
observeEvent(input$show_instructions, {
toggle("instruction_list")
})
}
# Run the Shiny application
shinyApp(ui = ui, server = server)
runApp('Documents/4th semseter/Data Visulaization/Submission/ThyroidFunction')
runApp('Documents/4th semseter/Data Visulaization/Submission/ThyroidFunction')
shiny::runApp()
shiny::runApp()
